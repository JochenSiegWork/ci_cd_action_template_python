# This is a template for copying in to your own repository.

name: code_check

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install $(find . -name "requirement*" -type f -printf ' -r %p')
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint  -d C0301,R0913,W1202 $(git ls-files '*.py') --ignored-modules "rdkit"
        
  pydocstyle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle
    - name: Analysing the code with pydocstyle
      run: |
        pydocstyle .
        
  black:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black[jupyter]
    - name: Analysing the code with black
      run: |
        black --check .

  isort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install isort
      - name: Analysing the code with isort
        run: |
          isort --profile black .

  test_basis:
    needs:
        - pylint
        - pydocstyle
        - black
        - isort
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install .
      - name: Run unit-tests
        run: |
          # TODO for the user of this template:
          #   You might have to adapt the call running the test coverage to fit your project structure:
          #   - Test directory name: Rename the "tests" directory to the name of the directory containing your unit tests. For example, if your
          #     unit test directory is called "my_unit_tests" you have to modify to `coverage run -m unittest discover my_unit_tests`.
          #   - Choose your test backend: When you use some other unittesting framework than Python's standard `unittest` you have to adapt
          #     the call to use your backend. For example, if you use pytest you would call `coverage run -m pytest tests`.
          #   See https://coverage.readthedocs.io/en/latest/index.html for details.
          
          # Run test suite in the tests directory. 
          coverage run -m unittest discover tests
          # Create a coverage report. Fail if the coverage is below 80%.
          coverage report --fail-under=80



